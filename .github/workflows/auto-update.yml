name: 🤖 RO文章自动更新

on:
  schedule:
    # 每天北京时间上午10:00执行 (UTC时间2:00)
    - cron: '0 2 * * *'
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制执行更新（忽略日期检查）'
        required: false
        default: false
        type: boolean

env:
  # 从GitHub Secrets获取飞书应用配置
  FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
  FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
  FEISHU_ACCESS_TOKEN: ${{ secrets.FEISHU_ACCESS_TOKEN }}
  FEISHU_REFRESH_TOKEN: ${{ secrets.FEISHU_REFRESH_TOKEN }}
  FEISHU_SPACE_TOKEN: ${{ secrets.FEISHU_SPACE_TOKEN }}
  FEISHU_SPACE_ID: ${{ secrets.FEISHU_SPACE_ID }}
  # 微信登录状态
  WECHAT_COOKIES_B64: ${{ secrets.WECHAT_COOKIES_B64 }}
  WECHAT_USER_AGENT: ${{ secrets.WECHAT_USER_AGENT }}

jobs:
  auto-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🌐 安装Chrome浏览器
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: 🔧 配置虚拟显示器
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
    - name: 📁 创建必要目录
      run: |
        mkdir -p output/auto_download
        mkdir -p logs
        
    - name: 🔐 配置飞书认证信息和微信登录状态
      run: |
        # 创建飞书OAuth令牌文件
        cat > feishu_oauth_tokens.json << EOF
        {
          "access_token": "${{ secrets.FEISHU_ACCESS_TOKEN }}",
          "refresh_token": "${{ secrets.FEISHU_REFRESH_TOKEN }}",
          "expires_in": 6900,
          "token_type": "Bearer",
          "scope": null,
          "created_at": $(date +%s),
          "app_id": "${{ secrets.FEISHU_APP_ID }}"
        }
        EOF
        
        # 创建微信登录状态文件
        if [ -n "${{ secrets.WECHAT_COOKIES_B64 }}" ]; then
          echo "🔐 恢复微信登录状态..."
          echo "${{ secrets.WECHAT_COOKIES_B64 }}" | base64 -d > wechat_cookies.pkl
          
          cat > wechat_session.json << EOF
        {
          "user_agent": "${{ secrets.WECHAT_USER_AGENT }}",
          "timestamp": $(date +%s),
          "login_success": true,
          "restored_from_github": true
        }
        EOF
          echo "✅ 微信登录状态已恢复"
        else
          echo "⚠️ 未找到微信登录状态，可能需要重新登录"
        fi
        
        # 创建用户配置文件
        cat > user_feishu_config.json << EOF
        {
          "app_id": "${{ secrets.FEISHU_APP_ID }}",
          "app_secret": "${{ secrets.FEISHU_APP_SECRET }}",
          "access_token": "${{ secrets.FEISHU_ACCESS_TOKEN }}",
          "space_token": "${{ secrets.FEISHU_SPACE_TOKEN }}",
          "space_id": "${{ secrets.FEISHU_SPACE_ID }}",
          "space_name": "仙境传说RO新启航公众号文章合集",
          "api_base": "https://open.feishu.cn/open-apis",
          "mode": "user_complete",
          "test_success": true,
          "test_time": "$(date '+%Y-%m-%d %H:%M:%S')",
          "capabilities": {
            "知识库权限": true,
            "云文档权限": true,
            "文件上传权限": true,
            "完整上传流程": true
          }
        }
        EOF
        
        # 创建自动更新设置文件
        cat > ro_auto_update_settings.json << EOF
        {
          "auto_update_enabled": true,
          "last_update_date": "$(date -d '1 day ago' '+%Y-%m-%d')",
          "timer_enabled": false,
          "timer_interval": 1440
        }
        EOF
        
    - name: 🤖 执行RO自动更新
      run: |
        export DISPLAY=:99
        python -c "
        import sys
        import os
        import json
        from datetime import datetime, timedelta
        from integrated_auto_download_uploader import IntegratedAutoUploader
        from headless_wechat_collector import HeadlessWeChatCollector
        
        print('🚀 GitHub Actions - RO文章自动更新开始')
        print('=' * 60)
        
        try:
            # 初始化配置
            app_id = os.getenv('FEISHU_APP_ID')
            app_secret = os.getenv('FEISHU_APP_SECRET')
            
            if not app_id or not app_secret:
                print('❌ 飞书应用配置缺失，请检查GitHub Secrets')
                sys.exit(1)
                
            print(f'✅ 飞书应用配置已加载')
            
            # 步骤1: 计算更新日期范围
            print('📅 步骤1: 计算更新日期范围...')
            
            # 读取上次更新日期
            try:
                with open('ro_auto_update_settings.json', 'r') as f:
                    settings = json.load(f)
                    last_date = settings.get('last_update_date')
            except:
                last_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            
            # 获取今天日期
            today = datetime.now().strftime('%Y-%m-%d')
            
            # 如果是手动强制更新，扩大日期范围
            force_update = '${{ github.event.inputs.force_update }}' == 'true'
            if force_update:
                print('🔄 检测到强制更新模式，扩大日期范围')
                start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            else:
                start_date = last_date
                
            end_date = today
            
            print(f'📅 更新日期范围: {start_date} 至 {end_date}')
            
            # 步骤2: 使用无头收集器自动收集文章
            print('🔍 步骤2: 自动收集微信文章...')
            
            try:
                # 初始化无头收集器
                collector = HeadlessWeChatCollector()
                
                # 计算收集天数
                if force_update:
                    days_back = 7  # 强制更新时收集一周的文章
                else:
                    # 计算自上次更新以来的天数
                    try:
                        last_date_obj = datetime.strptime(last_date, '%Y-%m-%d')
                        days_back = (datetime.now() - last_date_obj).days + 1
                        days_back = min(days_back, 30)  # 最多30天
                    except:
                        days_back = 1  # 默认1天
                
                print(f'📅 收集范围: 最近 {days_back} 天的文章')
                
                # 自动收集文章
                articles = collector.auto_collect_articles(
                    account_name='仙境传说RO新启航',
                    days_back=days_back,
                    max_articles=50
                )
                
                print(f'📊 收集到 {len(articles)} 篇文章')
                
                if len(articles) == 0:
                    print('✅ 没有新文章需要更新')
                    # 更新最后检查日期
                    settings = {}
                    try:
                        with open('ro_auto_update_settings.json', 'r') as f:
                            settings = json.load(f)
                    except:
                        settings = {}
                        
                    settings['last_update_date'] = today
                    settings['last_check_time'] = datetime.now().isoformat()
                    settings['status'] = 'no_new_articles'
                    
                    with open('ro_auto_update_settings.json', 'w') as f:
                        json.dump(settings, f, indent=2, ensure_ascii=False)
                    
                    print('✅ 自动更新检查完成（无新文章）')
                    sys.exit(0)
                    
            except Exception as e:
                print(f'❌ 收集文章时出错: {e}')
                print('💡 可能的原因：')
                print('   1. 微信登录状态已过期，需要重新生成secrets')
                print('   2. 网络连接问题')
                print('   3. 微信API变更')
                
                # 记录错误并退出
                settings = {}
                try:
                    with open('ro_auto_update_settings.json', 'r') as f:
                        settings = json.load(f)
                except:
                    settings = {}
                    
                settings['last_check_time'] = datetime.now().isoformat()
                settings['status'] = 'collection_failed'
                settings['error'] = str(e)
                
                with open('ro_auto_update_settings.json', 'w') as f:
                    json.dump(settings, f, indent=2, ensure_ascii=False)
                
                sys.exit(1)
            
            # 步骤3: 处理文章下载上传
            print(f'📚 步骤3: 处理文章下载上传...')
            
            uploader = IntegratedAutoUploader(app_id, app_secret)
            
            success_count = 0
            total_count = len(articles)
            
            for i, article in enumerate(articles, 1):
                url = article.get('url')
                title = article.get('title', f'文章{i}')
                
                print(f'📄 处理 {i}/{total_count}: {title[:30]}...')
                print(f'   URL: {url[:80]}...')
                
                try:
                    result = uploader.process_single_url(url, format_type='pdf')
                    if result:
                        success_count += 1
                        print(f'   ✅ 成功上传到飞书')
                    else:
                        print(f'   ❌ 上传失败')
                except Exception as e:
                    print(f'   ❌ 处理出错: {e}')
                    
                # 避免过快请求
                if i < total_count:
                    print(f'   ⏳ 等待 3 秒...')
                    import time
                    time.sleep(3)
                    
            print(f'📊 处理完成: {success_count}/{total_count} 成功')
            
            # 步骤4: 更新设置
            print('📅 步骤4: 更新检查日期...')
            
            # 重新读取设置（可能在前面被修改）
            try:
                with open('ro_auto_update_settings.json', 'r') as f:
                    settings = json.load(f)
            except:
                settings = {}
                
            settings['last_update_date'] = today
            settings['last_check_time'] = datetime.now().isoformat()
            settings['processed_count'] = success_count
            settings['total_count'] = total_count
            settings['status'] = 'completed'
            settings['articles_collected'] = len(articles)
            settings['success_rate'] = f'{success_count}/{total_count}' if total_count > 0 else '0/0'
            
            with open('ro_auto_update_settings.json', 'w') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            
            print(f'🎉 RO自动更新完成！')
            print(f'📊 收集文章: {len(articles)} 篇')
            print(f'📊 成功上传: {success_count}/{total_count} 篇')
            print(f'📊 成功率: {success_count/total_count*100:.1f}%' if total_count > 0 else '📊 成功率: 0%')
            
        except Exception as e:
            print(f'❌ 自动更新执行失败: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: 📊 上传执行日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: auto-update-logs-${{ github.run_number }}
        path: |
          logs/
          ro_auto_update_settings.json
          integrated_upload_log.json
        retention-days: 7
        
    - name: 📧 发送通知（可选）
      if: failure()
      run: |
        echo "⚠️ RO自动更新失败，请检查执行日志"
        # 这里可以添加邮件或其他通知逻辑 