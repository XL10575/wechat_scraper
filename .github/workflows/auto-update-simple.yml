name: 🤖 RO文章自动更新 (简化版)

on:
  schedule:
    # 每天北京时间上午10:00执行 (UTC时间2:00)
    - cron: '0 2 * * *'
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制执行更新（忽略日期检查）'
        required: false
        default: false
        type: boolean

env:
  # 从GitHub Secrets获取飞书应用配置
  FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
  FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
  FEISHU_ACCESS_TOKEN: ${{ secrets.FEISHU_ACCESS_TOKEN }}
  FEISHU_REFRESH_TOKEN: ${{ secrets.FEISHU_REFRESH_TOKEN }}
  FEISHU_SPACE_TOKEN: ${{ secrets.FEISHU_SPACE_TOKEN }}
  FEISHU_SPACE_ID: ${{ secrets.FEISHU_SPACE_ID }}
  # 微信登录状态
  WECHAT_COOKIES_B64: ${{ secrets.WECHAT_COOKIES_B64 }}
  WECHAT_USER_AGENT: ${{ secrets.WECHAT_USER_AGENT }}

jobs:
  auto-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🌐 安装Chrome浏览器
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: 🔧 配置虚拟显示器
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
    - name: 📁 创建必要目录
      run: |
        mkdir -p output/auto_download
        mkdir -p logs
        
    - name: 🔐 配置飞书认证信息和微信登录状态
      run: |
        # 创建飞书OAuth令牌文件
        cat > feishu_oauth_tokens.json << EOF
        {
          "access_token": "${{ secrets.FEISHU_ACCESS_TOKEN }}",
          "refresh_token": "${{ secrets.FEISHU_REFRESH_TOKEN }}",
          "expires_in": 6900,
          "token_type": "Bearer",
          "scope": null,
          "created_at": $(date +%s),
          "app_id": "${{ secrets.FEISHU_APP_ID }}"
        }
        EOF
        
        # 创建微信登录状态文件
        if [ -n "${{ secrets.WECHAT_COOKIES_B64 }}" ]; then
          echo "🔐 恢复微信登录状态..."
          echo "${{ secrets.WECHAT_COOKIES_B64 }}" | base64 -d > wechat_cookies.pkl
          
          cat > wechat_session.json << EOF
        {
          "user_agent": "${{ secrets.WECHAT_USER_AGENT }}",
          "timestamp": $(date +%s),
          "login_success": true,
          "restored_from_github": true
        }
        EOF
          echo "✅ 微信登录状态已恢复"
        else
          echo "⚠️ 未找到微信登录状态，可能需要重新登录"
        fi
        
        # 创建用户配置文件
        cat > user_feishu_config.json << EOF
        {
          "app_id": "${{ secrets.FEISHU_APP_ID }}",
          "app_secret": "${{ secrets.FEISHU_APP_SECRET }}",
          "access_token": "${{ secrets.FEISHU_ACCESS_TOKEN }}",
          "space_token": "${{ secrets.FEISHU_SPACE_TOKEN }}",
          "space_id": "${{ secrets.FEISHU_SPACE_ID }}",
          "space_name": "仙境传说RO新启航公众号文章合集",
          "api_base": "https://open.feishu.cn/open-apis",
          "mode": "user_complete",
          "test_success": true,
          "test_time": "$(date '+%Y-%m-%d %H:%M:%S')",
          "capabilities": {
            "知识库权限": true,
            "云文档权限": true,
            "文件上传权限": true,
            "完整上传流程": true
          }
        }
        EOF
        
        # 创建自动更新设置文件
        cat > ro_auto_update_settings.json << EOF
        {
          "auto_update_enabled": true,
          "last_update_date": "$(date -d '1 day ago' '+%Y-%m-%d')",
          "timer_enabled": false,
          "timer_interval": 1440
        }
        EOF
        
    - name: 🧪 调试导入问题
      run: |
        export DISPLAY=:99
        python workflow_debug.py
        
    - name: 🤖 执行RO自动更新 (简化版)
      run: |
        export DISPLAY=:99
        python -c "
        print('🚀 简化版自动更新开始')
        print('=' * 50)
        
        # 基础导入测试
        try:
            import sys
            import os
            import json
            from datetime import datetime, timedelta
            print('✅ 基础模块导入成功')
        except Exception as e:
            print(f'❌ 基础模块导入失败: {e}')
            sys.exit(1)
        
        # 检查文件存在性
        required_files = ['headless_wechat_collector.py', 'integrated_auto_download_uploader.py']
        for file in required_files:
            if os.path.exists(file):
                print(f'✅ 文件存在: {file}')
            else:
                print(f'❌ 文件不存在: {file}')
                sys.exit(1)
        
        # 尝试导入自定义模块
        try:
            sys.path.insert(0, '.')
            exec(open('headless_wechat_collector.py').read())
            print('✅ HeadlessWeChatCollector 模块加载成功')
        except Exception as e:
            print(f'❌ HeadlessWeChatCollector 加载失败: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
            
        try:
            exec(open('integrated_auto_download_uploader.py').read())
            print('✅ IntegratedAutoUploader 模块加载成功')
        except Exception as e:
            print(f'❌ IntegratedAutoUploader 加载失败: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        
        print('🎉 所有模块加载成功！')
        print('💡 如果此步骤成功，说明导入问题已解决')
        "
        
    - name: 📊 上传执行日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: auto-update-simple-logs-${{ github.run_number }}
        path: |
          logs/
          ro_auto_update_settings.json
        retention-days: 7 