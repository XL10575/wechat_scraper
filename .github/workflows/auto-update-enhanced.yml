name: Auto Update RO Articles Enhanced

on:
  schedule:
    # 每天北京时间10:00运行 (UTC 02:00)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新（收集最近7天的文章）'
        required: false
        default: false
        type: boolean
      max_articles:
        description: '最大文章数量'
        required: false
        default: '30'
        type: string

jobs:
  auto-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Restore WeChat login state
      run: |
        # 恢复cookies
        echo "${{ secrets.WECHAT_COOKIES_B64 }}" | base64 -d > wechat_cookies.pkl
        
        # 恢复会话信息
        cat > wechat_session.json << 'EOF'
        {
          "user_agent": "${{ secrets.WECHAT_USER_AGENT }}",
          "login_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "restored_from_secrets": true
        }
        EOF
        
        echo "✅ 微信登录状态已恢复"
        
    - name: Auto collect WeChat articles
      run: |
        python -c "
        from headless_wechat_collector import HeadlessWeChatCollector
        from datetime import datetime, timedelta
        import json
        import os
        
        # 获取输入参数
        force_update = '${{ github.event.inputs.force_update }}' == 'true'
        max_articles = int('${{ github.event.inputs.max_articles }}' or '30')
        
        print(f'🚀 开始自动收集微信文章...')
        print(f'📊 参数: 强制更新={force_update}, 最大文章数={max_articles}')
        
        # 创建收集器
        collector = HeadlessWeChatCollector()
        
        # 确定收集时间范围
        if force_update:
            days_back = 7
            print('🔄 强制更新模式: 收集最近7天的文章')
        else:
            # 检查上次更新时间
            try:
                with open('ro_auto_update_settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    last_update = datetime.fromisoformat(settings.get('last_update', '2025-01-01T00:00:00'))
                    days_since_update = (datetime.now() - last_update).days
                    days_back = min(max(days_since_update + 1, 1), 30)  # 至少1天，最多30天
                    print(f'📅 上次更新: {last_update.strftime(\"%Y-%m-%d %H:%M:%S\")}')
                    print(f'📅 收集最近 {days_back} 天的文章')
            except:
                days_back = 7
                print('📅 首次运行，收集最近7天的文章')
        
        # 自动收集文章
        articles = collector.auto_collect_articles(
            account_name='仙境传说RO新启航',
            days_back=days_back,
            max_articles=max_articles
        )
        
        print(f'✅ 收集完成: {len(articles)} 篇文章')
        
        if articles:
            # 保存文章URL到文件
            urls = [article['url'] for article in articles if article.get('url')]
            
            # 确保输出目录存在
            os.makedirs('output', exist_ok=True)
            
            with open('output/collected_urls.txt', 'w', encoding='utf-8') as f:
                for url in urls:
                    f.write(url + '\n')
            
            print(f'📄 已保存 {len(urls)} 个文章URL到 output/collected_urls.txt')
            
            # 显示收集到的文章
            print('\n📋 收集到的文章:')
            for i, article in enumerate(articles[:10], 1):
                title = article.get('title', '无标题')[:60]
                publish_time = article.get('publish_time', '未知时间')
                print(f'  {i}. {title}... - {publish_time}')
            
            if len(articles) > 10:
                print(f'  ... 还有 {len(articles) - 10} 篇文章')
        else:
            print('⚠️ 未收集到任何文章')
            # 创建空文件避免后续步骤出错
            os.makedirs('output', exist_ok=True)
            with open('output/collected_urls.txt', 'w') as f:
                pass
        
        # 设置输出变量
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'articles_count={len(articles)}\n')
            f.write(f'has_articles={\"true\" if articles else \"false\"}\n')
        "
      id: collect_articles
      
    - name: Process collected articles
      if: steps.collect_articles.outputs.has_articles == 'true'
      run: |
        echo "📥 开始处理收集到的文章..."
        
        # 检查是否有URL文件
        if [ ! -f "output/collected_urls.txt" ] || [ ! -s "output/collected_urls.txt" ]; then
          echo "❌ 没有找到文章URL文件或文件为空"
          exit 1
        fi
        
        # 统计URL数量
        url_count=$(wc -l < output/collected_urls.txt)
        echo "📊 共有 $url_count 个文章URL待处理"
        
        # 运行集成下载上传器
        python integrated_auto_download_uploader.py \
          --input output/collected_urls.txt \
          --max-files ${{ steps.collect_articles.outputs.articles_count }} \
          --auto-mode
        
        echo "✅ 文章处理完成"
        
    - name: Update settings and statistics
      run: |
        python -c "
        import json
        from datetime import datetime
        import os
        
        # 读取当前设置
        settings_file = 'ro_auto_update_settings.json'
        try:
            with open(settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
        except:
            settings = {}
        
        # 更新设置
        current_time = datetime.now()
        articles_count = int('${{ steps.collect_articles.outputs.articles_count }}')
        
        settings.update({
            'last_update': current_time.isoformat(),
            'last_run_articles_count': articles_count,
            'total_runs': settings.get('total_runs', 0) + 1,
            'total_articles_collected': settings.get('total_articles_collected', 0) + articles_count,
            'last_run_mode': '强制更新' if '${{ github.event.inputs.force_update }}' == 'true' else '自动更新',
            'github_actor': '${{ github.actor }}',
            'workflow_run_id': '${{ github.run_id }}'
        })
        
        # 保存设置
        with open(settings_file, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        
        print(f'📊 运行统计:')
        print(f'  - 本次收集: {articles_count} 篇文章')
        print(f'  - 总运行次数: {settings[\"total_runs\"]}')
        print(f'  - 累计收集: {settings[\"total_articles_collected\"]} 篇文章')
        print(f'  - 运行模式: {settings[\"last_run_mode\"]}')
        print(f'  - 更新时间: {current_time.strftime(\"%Y-%m-%d %H:%M:%S\")}')
        "
        
    - name: Cleanup temporary files
      run: |
        # 清理敏感文件
        rm -f wechat_cookies.pkl
        rm -f wechat_session.json
        
        # 保留日志文件但清理临时文件
        find . -name "*.tmp" -delete 2>/dev/null || true
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        echo "🧹 临时文件清理完成"
        
    - name: Summary
      run: |
        echo "🎉 自动更新任务完成！"
        echo ""
        echo "📊 本次运行总结:"
        echo "  - 收集文章数量: ${{ steps.collect_articles.outputs.articles_count }}"
        echo "  - 处理状态: ${{ steps.collect_articles.outputs.has_articles == 'true' && '✅ 成功' || '⚠️ 无新文章' }}"
        echo "  - 运行时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "  - 触发方式: ${{ github.event_name == 'schedule' && '定时任务' || '手动触发' }}"
        
        if [ "${{ steps.collect_articles.outputs.has_articles }}" = "true" ]; then
          echo ""
          echo "✅ 文章已成功收集并上传到飞书知识库"
        else
          echo ""
          echo "ℹ️ 本次运行未收集到新文章，这可能是正常的"
        fi 