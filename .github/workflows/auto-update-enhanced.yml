name: 🤖 RO文章自动更新 (增强版)

on:
  schedule:
    # 每天北京时间上午10:00执行 (UTC时间2:00)
    - cron: '0 2 * * *'
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制执行更新（忽略日期检查）'
        required: false
        default: false
        type: boolean
      days_back:
        description: '收集最近几天的文章'
        required: false
        default: '7'
        type: string

env:
  # 从GitHub Secrets获取飞书应用配置
  FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
  FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
  FEISHU_ACCESS_TOKEN: ${{ secrets.FEISHU_ACCESS_TOKEN }}
  FEISHU_REFRESH_TOKEN: ${{ secrets.FEISHU_REFRESH_TOKEN }}
  FEISHU_SPACE_TOKEN: ${{ secrets.FEISHU_SPACE_TOKEN }}
  FEISHU_SPACE_ID: ${{ secrets.FEISHU_SPACE_ID }}
  # 微信登录状态
  WECHAT_COOKIES_B64: ${{ secrets.WECHAT_COOKIES_B64 }}
  WECHAT_USER_AGENT: ${{ secrets.WECHAT_USER_AGENT }}

jobs:
  auto-update:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🌐 安装Chrome浏览器
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: 🔧 配置虚拟显示器
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
    - name: 📁 创建必要目录
      run: |
        mkdir -p output/auto_download
        mkdir -p logs
        
    - name: 🔐 配置飞书认证信息和微信登录状态
      run: |
        # 创建飞书OAuth令牌文件
        cat > feishu_oauth_tokens.json << EOF
        {
          "access_token": "${{ secrets.FEISHU_ACCESS_TOKEN }}",
          "refresh_token": "${{ secrets.FEISHU_REFRESH_TOKEN }}",
          "expires_in": 6900,
          "token_type": "Bearer",
          "scope": null,
          "created_at": $(date +%s),
          "app_id": "${{ secrets.FEISHU_APP_ID }}"
        }
        EOF
        
        # 创建微信登录状态文件
        if [ -n "${{ secrets.WECHAT_COOKIES_B64 }}" ]; then
          echo "🔐 恢复微信登录状态..."
          echo "${{ secrets.WECHAT_COOKIES_B64 }}" | base64 -d > wechat_cookies.pkl
          
          cat > wechat_session.json << EOF
        {
          "user_agent": "${{ secrets.WECHAT_USER_AGENT }}",
          "timestamp": $(date +%s),
          "login_success": true,
          "restored_from_github": true
        }
        EOF
          echo "✅ 微信登录状态已恢复"
        else
          echo "⚠️ 未找到微信登录状态，可能需要重新登录"
          exit 1
        fi
        
        # 创建用户配置文件
        cat > user_feishu_config.json << EOF
        {
          "app_id": "${{ secrets.FEISHU_APP_ID }}",
          "app_secret": "${{ secrets.FEISHU_APP_SECRET }}",
          "access_token": "${{ secrets.FEISHU_ACCESS_TOKEN }}",
          "space_token": "${{ secrets.FEISHU_SPACE_TOKEN }}",
          "space_id": "${{ secrets.FEISHU_SPACE_ID }}",
          "space_name": "仙境传说RO新启航公众号文章合集",
          "api_base": "https://open.feishu.cn/open-apis",
          "mode": "user_complete",
          "test_success": true,
          "test_time": "$(date '+%Y-%m-%d %H:%M:%S')",
          "capabilities": {
            "知识库权限": true,
            "云文档权限": true,
            "文件上传权限": true,
            "完整上传流程": true
          }
        }
        EOF
        
    - name: 🧪 测试文章收集功能
      run: |
        export DISPLAY=:99
        python -c "
        import sys
        import os
        from datetime import datetime, timedelta
        from headless_wechat_collector import HeadlessWeChatCollector
        
        print('🧪 测试文章收集功能')
        print('=' * 50)
        
        try:
            # 获取参数
            days_back = int('${{ github.event.inputs.days_back }}' or '7')
            force_update = '${{ github.event.inputs.force_update }}' == 'true'
            
            if force_update:
                days_back = max(days_back, 14)  # 强制更新时至少收集14天
            
            print(f'📅 收集范围: 最近 {days_back} 天')
            print(f'🔄 强制更新: {force_update}')
            
            # 初始化收集器
            collector = HeadlessWeChatCollector()
            
            # 测试收集
            articles = collector.auto_collect_articles(
                account_name='仙境传说RO新启航',
                days_back=days_back,
                max_articles=100
            )
            
            print(f'📊 收集结果: {len(articles)} 篇文章')
            
            if articles:
                print('📝 文章列表:')
                for i, article in enumerate(articles[:5], 1):
                    title = article.get('title', '无标题')[:50]
                    publish_time = article.get('publish_time', '未知时间')
                    print(f'  {i}. {title}... ({publish_time})')
                
                # 保存收集结果
                import json
                with open('collected_articles.json', 'w', encoding='utf-8') as f:
                    json.dump(articles, f, indent=2, ensure_ascii=False)
                
                print('✅ 文章收集成功，已保存到 collected_articles.json')
            else:
                print('❌ 没有收集到文章')
                print('🔍 可能的原因:')
                print('  1. 指定时间范围内没有新文章')
                print('  2. 微信登录状态已过期')
                print('  3. 网络连接问题')
                print('  4. 微信API变更')
                
                # 尝试更大的时间范围
                if days_back < 30:
                    print(f'🔄 尝试扩大到30天范围...')
                    articles = collector.auto_collect_articles(
                        account_name='仙境传说RO新启航',
                        days_back=30,
                        max_articles=50
                    )
                    
                    if articles:
                        print(f'✅ 扩大范围后收集到 {len(articles)} 篇文章')
                        import json
                        with open('collected_articles.json', 'w', encoding='utf-8') as f:
                            json.dump(articles, f, indent=2, ensure_ascii=False)
                    else:
                        print('❌ 扩大范围后仍无收集结果')
                        sys.exit(1)
                
        except Exception as e:
            print(f'❌ 测试失败: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: 🤖 处理收集到的文章
      if: success()
      run: |
        export DISPLAY=:99
        python -c "
        import sys
        import os
        import json
        from datetime import datetime
        from integrated_auto_download_uploader import IntegratedAutoUploader
        
        print('🚀 处理收集到的文章')
        print('=' * 50)
        
        try:
            # 检查是否有收集到的文章
            if not os.path.exists('collected_articles.json'):
                print('❌ 未找到收集的文章文件')
                sys.exit(1)
            
            # 读取文章列表
            with open('collected_articles.json', 'r', encoding='utf-8') as f:
                articles = json.load(f)
            
            if not articles:
                print('❌ 文章列表为空')
                sys.exit(1)
            
            print(f'📚 开始处理 {len(articles)} 篇文章')
            
            # 初始化上传器
            app_id = os.getenv('FEISHU_APP_ID')
            app_secret = os.getenv('FEISHU_APP_SECRET')
            
            if not app_id or not app_secret:
                print('❌ 飞书应用配置缺失')
                sys.exit(1)
            
            uploader = IntegratedAutoUploader(app_id, app_secret)
            
            success_count = 0
            total_count = len(articles)
            
            for i, article in enumerate(articles, 1):
                url = article.get('url')
                title = article.get('title', f'文章{i}')
                
                if not url:
                    print(f'⚠️ 第{i}篇文章缺少URL，跳过')
                    continue
                
                print(f'📄 处理 {i}/{total_count}: {title[:40]}...')
                print(f'   URL: {url[:80]}...')
                
                try:
                    result = uploader.process_single_url(url, format_type='pdf')
                    if result:
                        success_count += 1
                        print(f'   ✅ 成功上传到飞书')
                    else:
                        print(f'   ❌ 上传失败')
                except Exception as e:
                    print(f'   ❌ 处理出错: {e}')
                    
                # 避免过快请求
                if i < total_count:
                    print(f'   ⏳ 等待 3 秒...')
                    import time
                    time.sleep(3)
                    
            print(f'📊 处理完成: {success_count}/{total_count} 成功')
            
            # 更新设置文件
            settings = {
                'last_update_date': datetime.now().strftime('%Y-%m-%d'),
                'last_check_time': datetime.now().isoformat(),
                'processed_count': success_count,
                'total_count': total_count,
                'status': 'completed',
                'articles_collected': len(articles),
                'success_rate': f'{success_count}/{total_count}' if total_count > 0 else '0/0'
            }
            
            with open('ro_auto_update_settings.json', 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            
            print(f'🎉 自动更新完成！')
            print(f'📊 收集文章: {len(articles)} 篇')
            print(f'📊 成功上传: {success_count}/{total_count} 篇')
            print(f'📊 成功率: {success_count/total_count*100:.1f}%' if total_count > 0 else '📊 成功率: 0%')
            
        except Exception as e:
            print(f'❌ 处理文章失败: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: 📊 上传执行日志和结果
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: auto-update-enhanced-logs-${{ github.run_number }}
        path: |
          logs/
          ro_auto_update_settings.json
          collected_articles.json
        retention-days: 7 